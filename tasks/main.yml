---
- name: enable OpenMax IL acceleration on Pi OS
  set_fact:
    ustreamer_enable_omx: "{{ ansible_architecture.startswith('arm') and ustreamer_encoder.lower() == 'omx' }}"

- name: collect universal required apt packages
  set_fact:
    ustreamer_packages:
      - build-essential
      - git
      - libevent-dev
      - uuid-dev
      - libbsd-dev

- name: collect Raspberry Pi OS specific required apt packages
  set_fact:
    ustreamer_packages: "{{ ustreamer_packages }} + ['libjpeg8-dev']"
  when: ansible_architecture.startswith("arm")

- name: install libraspberrypi-dev if we're using OpenMax IL acceleration
  set_fact:
    ustreamer_packages: "{{ ustreamer_packages }} + ['libraspberrypi-dev']"
  when: ustreamer_enable_omx

- name: collect Debian-specific required apt packages
  set_fact:
    ustreamer_packages: "{{ ustreamer_packages }} + ['libjpeg62-turbo-dev']"
  when: ansible_distribution == 'Debian' and not ansible_architecture.startswith("arm")

- name: collect Ubuntu-specific required apt packages
  set_fact:
    ustreamer_packages: "{{ ustreamer_packages }} + ['libjpeg62-dev']"
  when: ansible_distribution == 'Ubuntu' and not ansible_architecture.startswith("arm")

- name: install uStreamer pre-requisite packages
  apt:
    name: "{{ ustreamer_packages }}"
    state: present

- name: create ustreamer group
  group:
    name: "{{ ustreamer_group }}"
    state: present

- name: create ustreamer user
  user:
    name: "{{ ustreamer_user }}"
    group: "{{ ustreamer_group }}"
    groups:
      - video
    system: yes
    create_home: no

- name: create uStreamer folder
  file:
    path: "{{ ustreamer_dir }}"
    state: directory
    owner: "{{ ustreamer_user }}"
    group: "{{ ustreamer_group }}"

- name: get uStreamer repo
  git:
    repo: "{{ ustreamer_repo }}"
    dest: "{{ ustreamer_dir }}"
    version: "{{ ustreamer_repo_version }}"
  register: ustreamer_repo_result
  notify:
    - restart uStreamer

- name: clean repository if needed
  make:
    chdir: "{{ ustreamer_dir }}"
    target: clean
  when: ustreamer_repo_result.changed

- name: build uStreamer
  make:
    chdir: "{{ ustreamer_dir }}"
    params:
      WITH_OMX: "{{ ustreamer_enable_omx | int }}"

- name: fix uStreamer folder permissions
  file:
    path: "{{ ustreamer_dir }}"
    state: directory
    owner: "{{ ustreamer_user }}"
    group: "{{ ustreamer_group }}"
    recurse: yes
  # TODO: Figure out why this fails idempotency otherwise.
  changed_when: false

- name: install uStreamer as a service
  template:
    src: ustreamer.systemd.j2
    dest: /lib/systemd/system/ustreamer.service
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload uStreamer systemd config
    - restart uStreamer

- name: enable systemd uStreamer service file
  systemd:
    name: ustreamer
    enabled: yes
